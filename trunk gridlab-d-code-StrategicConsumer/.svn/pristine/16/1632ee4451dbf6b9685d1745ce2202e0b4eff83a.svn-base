// cubic optimization test
// problem is a cubic minimization problem
// it should solve in a few iterations

#set tmp=.
#set verbose=1
#set profiler=1
#define include=../../core

class cubic {
	double y;
	double x;
	double a;
	double b;
	double c;
	double d;
	intrinsic create(object parent)
	{
		return 1;
	};
	intrinsic init(object parent)
	{
		gl_verbose("y = %g x^3 %+g x^2 %+g x %+g", a,b,c,d);
		double A = 3*a;
		double B = 2*b;
		double C = c;
		double R = B*B-4*A*C;
		if (R<0)
			gl_verbose("no minimax expected");
		else if (R==0)
		{
			double X = -B/A/2;
			gl_verbose("single minimax y=%.2f at x=%.2f",
				((a*X+b)*X+c)*X+d, X);
		}
		else
		{
			double X1 = (-B+sqrt(R))/A/2;
			double X2 = (-B-sqrt(R))/A/2;
			gl_verbose("minimax at (%.2f,%.2f) and (%.2f,%.2f)", 
				X1, ((a*X1+b)*X1+c)*X1+d, 
				X2, ((a*X2+b)*X2+c)*X2+d);
		}
		return 1;
	};
	intrinsic sync(TIMESTAMP t0, TIMESTAMP t1)
	{
		double dy = 3*a*x*x + 2*a*x + b;
		y = ((a*x + b)*x + c)*x + d;
		gl_verbose("function y(%.4f)  = %.2f",x,y);
		gl_verbose("function y'(%.4f) = %.2f",x,dy);
		return TS_NEVER;
	};
}

object cubic {
	name cubic1;
	a 1;
	b -4;
	c 4;
	d 5;
	x 3;
}
object cubic {
	name cubic2;
	a 1;
	b -4;
	c 4;
	d 5;
	x -3;
}


module optimize;

object simple {
	goal MINIMUM;
	objective "cubic1.y";
	variable "cubic1.x";
	delta 0.001;
	epsilon 0.00001;
	trials 5; 
}

object simple {
	goal MAXIMUM;
	objective "cubic2.y";
	variable "cubic2.x";
	delta 0.001;
	epsilon 0.00001;
	trials 5; 
}
