// $Id: test.glm 4738 2014-07-03 00:55:39Z dchassin $
//	Copyright (C) 2008 Battelle Memorial Institute
//
// Market test
// generates 10000 bids, one each 5 minutes and clear a market once per hour

#setenv GLPATH=../../core;../../core/etc
#setenv GRIDLABD=../../core
#include "rt/debugger.conf"
#set suppress_repeat_messages=0

module market;
module tape;

clock {
	timezone "CST+6CDT";
	timestamp '2000-01-01 0:00:00';
}

object auction {
	name Market;
	type DOUBLE;
	unit "MWh";
	period 3600;
	latency 86400;
	verbose TRUE;
	object recorder {
		file "test.csv";
		property "last.Q,last.P,next.Q,next.P";
		limit 8760;
		interval -1;
	};
};

class test {
	int16 count;
	object market;
	enumeration {BUYER=0, SELLER=1} role;
	int32 lastbid_id;
	int64 lastmkt_id;
	public int64 *thismkt_id;
	function auction::submit_bid;
	intrinsic create (object parent)
	{
		return SUCCESS;
	};
	intrinsic init (object parent)
	{
		lastbid_id = -1;
		lastmkt_id = -1;
		if (market==NULL)
			throw "market is not defined";
		thismkt_id = (int64*)gl_get_addr(market,"market_id");
		if (thismkt_id==NULL)
			throw "market does not define market_id";
		return SUCCESS;
	};
	intrinsic sync (TIMESTAMP t0, TIMESTAMP t1)
	{
		double quantity = gl_random_lognormal(3,1);
		double price = gl_random_lognormal(2,1);
		int64 negone = -1;
		lastbid_id = (int32)submit_bid(market,my,role==BUYER?-quantity:quantity,price,*thismkt_id!=lastmkt_id?negone:lastbid_id);
		count--;
		lastmkt_id = *thismkt_id;
		if (count>0)
			return t1+300;
		else
			return TS_NEVER;
	};
}

object test:..10 {
	count 10000;
	market Market;
	role BUYER;
}

object test:..10 {
	count 10000;
	market Market;
	role SELLER;
}
